<?php
/*
 * Set tabs to 4 for best viewing.
 *
 * Latest version is available at http://adodb.sourceforge.net
 *
 * This is the main include file for ADOdb.
 * Database specific drivers are stored in the adodb/drivers/adodb-*.inc.php
 *
 * The ADOdb files are formatted so that doxygen can be used to generate documentation.
 * Doxygen is a documentation generation tool and can be downloaded from http://doxygen.org/
 */

require_once __DIR__.'/ADODB_Cache_File.php';
require_once __DIR__.'/ADOConnection.php';
require_once __DIR__.'/ADOFetchObj.php';
require_once __DIR__.'/ADODB_Iterator_empty.php';
require_once __DIR__.'/ADORecordSet_empty.php';
require_once __DIR__.'/ADODB_Iterator.php';
require_once __DIR__.'/ADORecordSet.php';
require_once __DIR__.'/ADORecordSet_array.php';
require_once __DIR__.'/ADOFieldObject.php';
require_once __DIR__.'/helperFunctions.php';

if (defined('_ADODB_LAYER')) {
    exit;
}

define('_ADODB_LAYER', 1);

/*
 * Set ADODB_DIR to the directory where this file resides...
 * This constant was formerly called $ADODB_RootPath
 */
if (!defined('ADODB_DIR')) {
    define('ADODB_DIR', dirname(__FILE__));
}

//==============================================================================================
// GLOBAL VARIABLES
//==============================================================================================

global
$ADODB_vers, // database version
$ADODB_COUNTRECS, // count number of records returned - slows down query
$ADODB_CACHE_DIR, // directory to cache recordsets
$ADODB_CACHE,
$ADODB_CACHE_CLASS,
$ADODB_EXTENSION, // ADODB extension installed
$ADODB_COMPAT_FETCH, // If $ADODB_COUNTRECS and this is true, $rs->fields is available on EOF
$ADODB_FETCH_MODE, // DEFAULT, NUM, ASSOC or BOTH. Default follows native driver default...
$ADODB_GETONE_EOF,
$ADODB_QUOTE_FIELDNAMES; // Allows you to force quotes (backticks) around field names in queries generated by getinsertsql and getupdatesql.

//==============================================================================================
// GLOBAL SETUP
//==============================================================================================

$ADODB_EXTENSION = defined('ADODB_EXTENSION');

//********************************************************//
/*
Controls $ADODB_FORCE_TYPE mode. Default is ADODB_FORCE_VALUE (3).
Used in GetUpdateSql and GetInsertSql functions. Thx to Niko, nuko#mbnet.fi

    0 = ignore empty fields. All empty fields in array are ignored.
    1 = force null. All empty, php null and string 'null' fields are changed to sql NULL values.
    2 = force empty. All empty, php null and string 'null' fields are changed to sql empty '' or 0 values.
    3 = force value. Value is left as it is. Php null and string 'null' are set to sql NULL values and empty fields '' are set to empty '' sql values.
*/
define('ADODB_FORCE_IGNORE', 0);
define('ADODB_FORCE_NULL', 1);
define('ADODB_FORCE_EMPTY', 2);
define('ADODB_FORCE_VALUE', 3);
//********************************************************//

if (!$ADODB_EXTENSION || ADODB_EXTENSION < 4.0) {
    define('ADODB_BAD_RS', '<p>Bad $rs in %s. Connection or SQL invalid. Try using $connection->debug=true;</p>');

    // allow [ ] @ ` " and . in table names
    define('ADODB_TABLE_REGEX', '([]0-9a-z_\:\"\`\.\@\[-]*)');

    // prefetching used by oracle
    if (!defined('ADODB_PREFETCH_ROWS')) {
        define('ADODB_PREFETCH_ROWS', 10);
    }

    /*
    Controls ADODB_FETCH_ASSOC field-name case. Default is 2, use native case-names.
    This currently works only with mssql, odbc, oci8po and ibase derived drivers.

        0 = assoc lowercase field names. $rs->fields['orderid']
        1 = assoc uppercase field names. $rs->fields['ORDERID']
        2 = use native-case field names. $rs->fields['OrderID']
    */

    define('ADODB_FETCH_DEFAULT', 0);
    define('ADODB_FETCH_NUM', 1);
    define('ADODB_FETCH_ASSOC', 2);
    define('ADODB_FETCH_BOTH', 3);

    if (!defined('TIMESTAMP_FIRST_YEAR')) {
        define('TIMESTAMP_FIRST_YEAR', 100);
    }

    // PHP's version scheme makes converting to numbers difficult - workaround
    $_adodb_ver = (float) PHP_VERSION;
    if ($_adodb_ver >= 5.2) {
        define('ADODB_PHPVER', 0x5200);
    } elseif ($_adodb_ver >= 5.0) {
        define('ADODB_PHPVER', 0x5000);
    } else {
        die('PHP5 or later required. You are running '.PHP_VERSION);
    }
}

/**
 * @param array  $src
 * @param array  $dest
 * @param string $data
 *
 * @return mixed
 */
function ADODB_str_replace($src, $dest, $data)
{
    if (ADODB_PHPVER >= 0x4050) {
        return str_replace($src, $dest, $data);
    }

    $s = reset($src);
    $d = reset($dest);
    while (false !== $s) {
        $data = str_replace($s, $d, $data);
        $s = next($src);
        $d = next($dest);
    }

    return $data;
}

function ADODB_Setup()
{
    global
    $ADODB_vers, // database version
    $ADODB_COUNTRECS, // count number of records returned - slows down query
    $ADODB_CACHE_DIR, // directory to cache recordsets
    $ADODB_FETCH_MODE,
    $ADODB_CACHE,
    $ADODB_CACHE_CLASS,
    $ADODB_FORCE_TYPE,
    $ADODB_GETONE_EOF,
    $ADODB_QUOTE_FIELDNAMES;

    if (empty($ADODB_CACHE_CLASS)) {
        $ADODB_CACHE_CLASS = 'ADODB_Cache_File';
    }
    $ADODB_FETCH_MODE = ADODB_FETCH_DEFAULT;
    $ADODB_FORCE_TYPE = ADODB_FORCE_VALUE;
    $ADODB_GETONE_EOF = null;

    if (!isset($ADODB_CACHE_DIR)) {
        $ADODB_CACHE_DIR = '/tmp'; //(isset($_ENV['TMP'])) ? $_ENV['TMP'] : '/tmp';
    } else {
        // do not accept url based paths, eg. http:/ or ftp:/
        if (false !== strpos($ADODB_CACHE_DIR, '://')) {
            die('Illegal path http:// or ftp://');
        }
    }

    // Initialize random number generator for randomizing cache flushes
    // -- note Since PHP 4.2.0, the seed  becomes optional and defaults to a random value if omitted.
    srand(((float) microtime()) * 1000000);

    /**
     * ADODB version as a string.
     */
    $ADODB_vers = 'V5.15 19 Jan 2012  (c) 2000-2012 John Lim (jlim#natsoft.com). All rights reserved. Released BSD & LGPL.';

    /*
     * Determines whether recordset->RecordCount() is used.
     * Set to false for highest performance -- RecordCount() will always return -1 then
     * for databases that provide "virtual" recordcounts...
     */
    if (!isset($ADODB_COUNTRECS)) {
        $ADODB_COUNTRECS = true;
    }
}

ADODB_Setup();

/**
 * @param $s
 *
 * @return mixed
 */
function _adodb_safedate($s)
{
    return str_replace(array("'", '\\'), '', $s);
}

/**
 * parse date string to prevent injection attack
 * date string will have one quote at beginning e.g. '3434343'.
 *
 * @param $s
 *
 * @return string
 */
function _adodb_safedateq($s)
{
    $len = strlen($s);
    if ("'" !== $s[0]) {
        $s2 = "'";
    } else {
        $s2 = "'";
    }
    for ($i = 1; $i < $len; ++$i) {
        $ch = $s[$i];
        if ('\\' === $ch) {
            $s2 .= "'";
            break;
        } elseif ("'" === $ch) {
            $s2 .= $ch;
            break;
        }

        $s2 .= $ch;
    }

    return $s2;
}

/**
 * @param $dbms
 * @param $fn
 * @param $errno
 * @param $errmsg
 * @param $p1
 * @param $p2
 * @param $thisConnection
 */
function ADODB_TransMonitor($dbms, $fn, $errno, $errmsg, $p1, $p2, &$thisConnection)
{
    //print "Errorno ($fn errno=$errno m=$errmsg) ";
    $thisConnection->_transOK = false;
    if ($thisConnection->_oldRaiseFn) {
        $fn = $thisConnection->_oldRaiseFn;
        $fn($dbms, $fn, $errno, $errmsg, $p1, $p2, $thisConnection);
    }
}

// DATE AND TIME FUNCTIONS
if (!defined('ADODB_DATE_VERSION')) {
    include ADODB_DIR.'/adodb-time.inc.php';
}
